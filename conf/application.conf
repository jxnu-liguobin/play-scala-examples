akka {
  actor.default-dispatcher.fork-join-executor.parallelism-max = 64
  //  actor.debug.receive = on
  //  actor-system = "custom-application"
}
#测试的配置
hello = "hello world"

app.config = {
  title = "My App"
  baseUri = "https://example.com/"
}

#加载自己的module
play.modules.enabled += "modules.MyModule"
play.allowGlobalApplication = false
play.http.secret.key = "changeme"
play.modules {
}
#需要注入Langs
play.i18n {
  langs = ["en", "zh"]
}

# Play HTTP settings
# ~~~~~
play.http {

  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  #transport = "native"
}


play.ws {

  ssl {

  }
}


play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}


play.filters {
  enabled += filters.ExampleFilter

  csrf.header.bypassHeaders {
    ##不拦截ajax
    X-Requested-With = "*"
    Csrf-Token = "nocheck"
  }
}

play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  config = "db"
  default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

#重启生效
db {
  default.driver = com.mysql.jdbc.Driver
  default.url = "jdbc:mysql://localhost/playtest"
  default.username = "root"
  default.password = "root"
  default.logSql = true
}

fixedConnectionPool = 9

database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

#slick2.1或更早版本使用上面的，slick 3使用下面的
slick.dbs.default {
  driver = "slick.driver.MySQLDriver$"
  db.driver = com.mysql.jdbc.Driver
  db.url = "jdbc:mysql://localhost/playtest"
  db.user = "root"
  db.password = "root"
  db.logSql = true
}
#登录 psql -h localhost -U postgres -d postgres -p 5432;
#查看客户端编码 show client_encoding;
#修改编码 set client_encoding to 'utf8';
slick.dbs.postgresqldb {
  driver = "slick.driver.PostgresDriver$"
  db.driver = org.postgresql.Driver
  db.url = "jdbc:postgresql://127.0.0.1:5432/playtest"
  db.user = "postgres"
  db.password = "root"
  db.logSql = true
}